#!/usr/bin/env python3
"""
Interactive Cloud Integration Setup
==================================

This script helps you set up the environment configuration and then
runs the verification steps for cloud integration.
"""

import os
import sys
from pathlib import Path
import subprocess


def create_env_file():
    """Create .env file with user input."""
    print("üîß JCSELECT Cloud Integration Setup")
    print("=" * 40)
    
    env_file = Path(".env")
    if env_file.exists():
        response = input(f"\n.env file already exists. Overwrite? (y/N): ").strip().lower()
        if response != 'y':
            print("Using existing .env file...")
            return True
    
    print("\nüìù Please provide the following configuration:")
    
    # Get cloud server URL
    print("\n1. Cloud Server URL:")
    print("   Example: https://your-app.azurewebsites.net/api")
    print("   Example: https://your-domain.com/api")
    sync_url = input("   Enter your SYNC_API_URL: ").strip()
    
    if not sync_url:
        print("‚ùå SYNC_API_URL is required!")
        return False
    
    # Get JWT secret
    print("\n2. JWT Secret (must be 32+ characters):")
    print("   This must match the secret used by your cloud server")
    print("   Generate random: python -c \"import secrets; print(secrets.token_urlsafe(32))\"")
    jwt_secret = input("   Enter your SYNC_JWT_SECRET: ").strip()
    
    if not jwt_secret or len(jwt_secret) < 32:
        print("‚ùå SYNC_JWT_SECRET must be at least 32 characters!")
        return False
    
    # Create .env content
    env_content = f"""# JCSELECT Environment Configuration
# Generated by setup_cloud_integration.py

# Database Configuration
DB_DRIVER=sqlite
DB_USER=
DB_PASS=
DB_HOST=localhost
DB_NAME=jcselect
DB_PORT=1433

# Sync Configuration
SYNC_API_URL={sync_url}
SYNC_JWT_SECRET={jwt_secret}
SYNC_ENABLED=true
SYNC_INTERVAL_SECONDS=300
SYNC_FAST_TALLY_ENABLED=true
SYNC_PULL_PAGE_SIZE=100
SYNC_MAX_PULL_PAGES=10
SYNC_MAX_RETRIES=5
SYNC_BACKOFF_BASE=2.0
SYNC_BACKOFF_MAX_SECONDS=300

# Application Mode (overridden by entry points)
JCSELECT_MODE=operator
JCSELECT_REQUIRED_ROLE=operator

# Debug settings
DEBUG=false
"""

    try:
        with open(".env", "w", encoding="utf-8") as f:
            f.write(env_content)
        print("\n‚úÖ .env file created successfully!")
        return True
    except Exception as e:
        print(f"\n‚ùå Failed to create .env file: {e}")
        return False


def run_verification():
    """Run the cloud verification script."""
    print("\nüîç Running cloud integration verification...")
    
    try:
        result = subprocess.run(
            [sys.executable, "cloud_verification.py"],
            cwd=Path(__file__).parent
        )
        return result.returncode == 0
    except Exception as e:
        print(f"‚ùå Failed to run verification: {e}")
        return False


def print_manual_setup_instructions():
    """Print manual setup instructions if auto-setup fails."""
    print("\nüìã MANUAL SETUP INSTRUCTIONS")
    print("=" * 30)
    
    print("\n1. Create .env file with these variables:")
    print("   SYNC_API_URL=https://your-cloud-host.com/api")
    print("   SYNC_JWT_SECRET=your-production-jwt-secret-32-chars-long")
    
    print("\n2. Check your cloud baseline:")
    print("   ‚Ä¢ Verify https://your-cloud-host.com/health returns 200 OK")
    print("   ‚Ä¢ Ensure MSSQL database has reference data (Pens, Parties, Candidates, Users)")
    
    print("\n3. Create test users (if needed):")
    print("   POST to https://your-cloud-host.com/auth/create-user")
    print("   Admin: {\"username\": \"admin\", \"password\": \"admin123\", \"role\": \"admin\"}")
    print("   Operator: {\"username\": \"operator\", \"password\": \"operator123\", \"role\": \"operator\"}")
    
    print("\n4. Test the apps:")
    print("   jcselect-admin --reset-local-db  (for fresh data pull)")
    print("   jcselect-admin                   (admin interface)")  
    print("   jcselect-operator                (operator interface)")
    
    print("\n5. Verify fast-sync:")
    print("   ‚Ä¢ Start both admin and operator apps")
    print("   ‚Ä¢ Use operator to confirm a ballot")
    print("   ‚Ä¢ Check admin Live Results updates within 2 seconds")


def main():
    """Main setup function."""
    print("Starting JCSELECT cloud integration setup...\n")
    
    # Check if we're in the right directory
    if not Path("pyproject.toml").exists():
        print("‚ùå Please run this script from the jcselect project root directory")
        return 1
    
    # Interactive setup
    response = input("Do you want to configure .env interactively? (Y/n): ").strip().lower()
    if response in ['', 'y', 'yes']:
        if not create_env_file():
            print_manual_setup_instructions()
            return 1
    else:
        print("Skipping interactive setup...")
        if not Path(".env").exists():
            print("‚ùå No .env file found!")
            print_manual_setup_instructions()
            return 1
    
    # Run verification
    response = input("\nRun verification now? (Y/n): ").strip().lower()
    if response in ['', 'y', 'yes']:
        if not run_verification():
            print("\n‚ö†Ô∏è  Some verification steps failed. See output above.")
            print("You can re-run verification with: python cloud_verification.py")
            return 1
    
    print("\nüéâ Setup completed successfully!")
    print("\nNext steps:")
    print("  1. jcselect-admin    (start admin app)")
    print("  2. jcselect-operator (start operator app)")
    print("  3. Test the live sync between both apps")
    
    return 0


if __name__ == "__main__":
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Setup interrupted by user")
        sys.exit(1)
    except Exception as e:
        print(f"\n\nüí• Setup failed: {e}")
        sys.exit(1) 