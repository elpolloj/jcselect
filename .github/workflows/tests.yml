name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test (${{ matrix.os }}, Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ["3.10", "3.11"]
    
    env:
      CI_PERF_SKIP: 1  # Skip performance tests in regular CI runs
      CI_COV_MIN: ${{ vars.CI_COV_MIN || '90' }}  # Override coverage minimum if needed
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    
    - name: Install project
      run: poetry install --no-interaction
    
    - name: Set up Qt environment (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0
        export QT_QPA_PLATFORM=offscreen
    
    - name: Run linting
      run: |
        poetry run ruff check .
        poetry run ruff format --check .
    
    - name: Run type checking
      run: poetry run mypy src/jcselect --ignore-missing-imports
    
    - name: Run tests with coverage
      run: |
        # Override coverage minimum from environment if set
        if [ ! -z "$CI_COV_MIN" ]; then
          poetry run pytest --cov-fail-under=$CI_COV_MIN
        else
          poetry run pytest
        fi
      shell: bash
    
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  perf-nightly:
    name: Performance Tests (Nightly)
    runs-on: ubuntu-latest
    # Only run on schedule or when manually triggered
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    env:
      CI_PERF_SKIP: 0  # Enable performance tests
      QT_QPA_PLATFORM: offscreen
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
    
    - name: Install dependencies
      run: |
        poetry install --no-interaction
        # Install additional performance testing dependencies
        poetry add psutil --group dev
    
    - name: Set up Qt environment
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0
        export QT_QPA_PLATFORM=offscreen
    
    - name: Run performance tests
      run: |
        echo "Running performance tests..."
        poetry run pytest tests/perf/ -v -s --tb=short
        echo "Performance tests completed"
    
    - name: Upload performance results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: |
          tests/perf/results/
          *.log
        retention-days: 30

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        if [ "${{ needs.test.result }}" != "success" ]; then
          echo "Some tests failed"
          exit 1
        else
          echo "All tests passed successfully"
        fi 