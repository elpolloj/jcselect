"""Initial schema

Revision ID: 52569a9164c7
Revises:
Create Date: 2025-05-28 17:20:23.741722

"""
from collections.abc import Sequence
from typing import Union

import sqlalchemy as sa
import sqlmodel.sql.sqltypes

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "52569a9164c7"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "parties",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("short_code", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("display_order", sa.Integer(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_parties_display_order"), "parties", ["display_order"], unique=False
    )
    op.create_index(
        op.f("ix_parties_is_active"), "parties", ["is_active"], unique=False
    )
    op.create_index(op.f("ix_parties_name"), "parties", ["name"], unique=True)
    op.create_table(
        "pens",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("town_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("label", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_pens_label"), "pens", ["label"], unique=False)
    op.create_index(op.f("ix_pens_town_name"), "pens", ["town_name"], unique=False)
    op.create_table(
        "users",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("username", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("password_hash", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("full_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("role", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_users_username"), "users", ["username"], unique=True)
    op.create_table(
        "audit_logs",
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("operator_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("action", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("entity_type", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("entity_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("old_values", sa.JSON(), nullable=True),
        sa.Column("new_values", sa.JSON(), nullable=True),
        sa.Column("timestamp", sa.DateTime(), nullable=False),
        sa.Column("ip_address", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("user_agent", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.ForeignKeyConstraint(
            ["operator_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_audit_logs_action"), "audit_logs", ["action"], unique=False
    )
    op.create_index(
        op.f("ix_audit_logs_entity_id"), "audit_logs", ["entity_id"], unique=False
    )
    op.create_index(
        op.f("ix_audit_logs_entity_type"), "audit_logs", ["entity_type"], unique=False
    )
    op.create_index(
        op.f("ix_audit_logs_operator_id"), "audit_logs", ["operator_id"], unique=False
    )
    op.create_index(
        op.f("ix_audit_logs_timestamp"), "audit_logs", ["timestamp"], unique=False
    )
    op.create_table(
        "tally_sessions",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("pen_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("operator_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("session_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("started_at", sa.DateTime(), nullable=False),
        sa.Column("completed_at", sa.DateTime(), nullable=True),
        sa.Column("total_votes_counted", sa.Integer(), nullable=False),
        sa.Column("notes", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.ForeignKeyConstraint(
            ["operator_id"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(
            ["pen_id"],
            ["pens.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_tally_sessions_operator_id"),
        "tally_sessions",
        ["operator_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_tally_sessions_pen_id"), "tally_sessions", ["pen_id"], unique=False
    )
    op.create_table(
        "voters",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("pen_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("voted_by_operator_id", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("voter_number", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("full_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("father_name", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("mother_name", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("birth_year", sa.Integer(), nullable=True),
        sa.Column("gender", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("has_voted", sa.Boolean(), nullable=False),
        sa.Column("voted_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["pen_id"],
            ["pens.id"],
        ),
        sa.ForeignKeyConstraint(
            ["voted_by_operator_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_voters_has_voted"), "voters", ["has_voted"], unique=False)
    op.create_index(op.f("ix_voters_pen_id"), "voters", ["pen_id"], unique=False)
    op.create_index(
        op.f("ix_voters_voted_by_operator_id"),
        "voters",
        ["voted_by_operator_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_voters_voter_number"), "voters", ["voter_number"], unique=False
    )
    op.create_table(
        "tally_lines",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("tally_session_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("party_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("vote_count", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["party_id"],
            ["parties.id"],
        ),
        sa.ForeignKeyConstraint(
            ["tally_session_id"],
            ["tally_sessions.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "tally_session_id", "party_id", name="uq_tally_session_party"
        ),
    )
    op.create_index(
        op.f("ix_tally_lines_party_id"), "tally_lines", ["party_id"], unique=False
    )
    op.create_index(
        op.f("ix_tally_lines_tally_session_id"),
        "tally_lines",
        ["tally_session_id"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_tally_lines_tally_session_id"), table_name="tally_lines")
    op.drop_index(op.f("ix_tally_lines_party_id"), table_name="tally_lines")
    op.drop_table("tally_lines")
    op.drop_index(op.f("ix_voters_voter_number"), table_name="voters")
    op.drop_index(op.f("ix_voters_voted_by_operator_id"), table_name="voters")
    op.drop_index(op.f("ix_voters_pen_id"), table_name="voters")
    op.drop_index(op.f("ix_voters_has_voted"), table_name="voters")
    op.drop_table("voters")
    op.drop_index(op.f("ix_tally_sessions_pen_id"), table_name="tally_sessions")
    op.drop_index(op.f("ix_tally_sessions_operator_id"), table_name="tally_sessions")
    op.drop_table("tally_sessions")
    op.drop_index(op.f("ix_audit_logs_timestamp"), table_name="audit_logs")
    op.drop_index(op.f("ix_audit_logs_operator_id"), table_name="audit_logs")
    op.drop_index(op.f("ix_audit_logs_entity_type"), table_name="audit_logs")
    op.drop_index(op.f("ix_audit_logs_entity_id"), table_name="audit_logs")
    op.drop_index(op.f("ix_audit_logs_action"), table_name="audit_logs")
    op.drop_table("audit_logs")
    op.drop_index(op.f("ix_users_username"), table_name="users")
    op.drop_table("users")
    op.drop_index(op.f("ix_pens_town_name"), table_name="pens")
    op.drop_index(op.f("ix_pens_label"), table_name="pens")
    op.drop_table("pens")
    op.drop_index(op.f("ix_parties_name"), table_name="parties")
    op.drop_index(op.f("ix_parties_is_active"), table_name="parties")
    op.drop_index(op.f("ix_parties_display_order"), table_name="parties")
    op.drop_table("parties")
    # ### end Alembic commands ###
